{"ast":null,"code":"var _jsxFileName = \"/Users/mattia22nchi/Desktop/Programming/battleship/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Grid from './Grid';\nimport Ship from './Ship';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGrid = () => Array(10).fill(null).map(() => Array(10).fill(null));\nconst ships = [{\n  name: 'Destroyer',\n  size: 1\n}, {\n  name: 'Submarine',\n  size: 2\n}, {\n  name: 'Cruiser',\n  size: 3\n}, {\n  name: 'Battleship',\n  size: 4\n}, {\n  name: 'Aircraft Carrier',\n  size: 5\n}];\nconst App = () => {\n  _s();\n  const [playerGrid, setPlayerGrid] = useState(initialGrid());\n  const [computerGrid, setComputerGrid] = useState(initialGrid());\n  const [currentShip, setCurrentShip] = useState(null);\n  const [placingShip, setPlacingShip] = useState(false);\n  const [orientation, setOrientation] = useState('horizontal');\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [placedShips, setPlacedShips] = useState([]);\n  useEffect(() => {\n    placeComputerShips();\n  }, []);\n  useEffect(() => {\n    if (placedShips.length === ships.length) {\n      placeComputerShips();\n    }\n  }, [placedShips]);\n  const placeComputerShips = () => {\n    let newGrid = computerGrid.map(row => [...row]);\n    const shipTypes = [{\n      name: 'Destroyer',\n      size: 1\n    }, {\n      name: 'Submarine',\n      size: 2\n    }, {\n      name: 'Cruiser',\n      size: 3\n    }, {\n      name: 'Battleship',\n      size: 4\n    }, {\n      name: 'Aircraft Carrier',\n      size: 5\n    }];\n    shipTypes.forEach(ship => {\n      let placed = false;\n      while (!placed) {\n        const orientation = Math.random() < 0.5 ? 'horizontal' : 'vertical';\n        const row = Math.floor(Math.random() * 10);\n        const col = Math.floor(Math.random() * 10);\n        if (canPlaceShip(newGrid, ship.size, row, col, orientation)) {\n          newGrid = placeShipOnGrid(newGrid, ship.size, row, col, orientation);\n          placed = true;\n        }\n      }\n    });\n    setComputerGrid(newGrid);\n  };\n  const canPlaceShip = (grid, size, row, col, orientation) => {\n    if (orientation === 'horizontal') {\n      if (col + size > 10) return false;\n      for (let i = col; i < col + size; i++) {\n        if (grid[row][i] !== null) return false;\n      }\n    } else {\n      if (row + size > 10) return false;\n      for (let i = row; i < row + size; i++) {\n        if (grid[i][col] !== null) return false;\n      }\n    }\n    return true;\n  };\n  const placeShipOnGrid = (grid, size, row, col, orientation) => {\n    const newGrid = grid.map(row => [...row]);\n    if (orientation === 'horizontal') {\n      for (let i = col; i < col + size; i++) {\n        newGrid[row][i] = 'ship';\n      }\n    } else {\n      for (let i = row; i < row + size; i++) {\n        newGrid[i][col] = 'ship';\n      }\n    }\n    return newGrid;\n  };\n  const handleCellClick = (row, col) => {\n    if (placingShip && currentShip) {\n      if (canPlaceShip(playerGrid, currentShip.size, row, col, orientation)) {\n        const newGrid = placeShipOnGrid(playerGrid, currentShip.size, row, col, orientation);\n        setPlayerGrid(newGrid);\n        setCurrentShip(null);\n        setPlacingShip(false);\n        setPlacedShips([...placedShips, currentShip.name]);\n      }\n    } else if (playerTurn && !gameOver && computerGrid[row][col] !== 'hit' && computerGrid[row][col] !== 'miss') {\n      if (placedShips.length !== ships.length) {\n        alert('You have to place all ships to start game.');\n      } else {\n        const newGrid = computerGrid.map(row => [...row]);\n        if (newGrid[row][col] === 'ship') {\n          newGrid[row][col] = 'hit';\n        } else {\n          newGrid[row][col] = 'miss';\n        }\n        setComputerGrid(newGrid);\n        setPlayerTurn(false);\n        checkWinCondition(newGrid, 'computer');\n        setTimeout(computerMove, 1000);\n      }\n    }\n  };\n  const computerMove = () => {\n    let newGrid = playerGrid.map(row => [...row]);\n    let moveMade = false;\n    while (!moveMade) {\n      const row = Math.floor(Math.random() * 10);\n      const col = Math.floor(Math.random() * 10);\n      if (newGrid[row][col] !== 'hit' && newGrid[row][col] !== 'miss') {\n        if (newGrid[row][col] === 'ship') {\n          newGrid[row][col] = 'hit';\n        } else {\n          newGrid[row][col] = 'miss';\n        }\n        moveMade = true;\n      }\n    }\n    setPlayerGrid(newGrid);\n    checkWinCondition(newGrid, 'player');\n    setPlayerTurn(true);\n  };\n  const checkWinCondition = (grid, player) => {\n    let allShipsSunk = true;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell === 'ship') allShipsSunk = false;\n      });\n    });\n    if (allShipsSunk) {\n      setGameOver(true);\n      alert(`${player === 'player' ? 'Computer' : 'Player'} wins!`);\n    }\n  };\n  const placeShip = ship => {\n    if (!placedShips.includes(ship.name)) {\n      setCurrentShip(ship);\n      setPlacingShip(true);\n    } else {\n      alert(`You have already placed a ${ship.name}.`);\n    }\n  };\n  const toggleOrientation = () => {\n    setOrientation(prevOrientation => prevOrientation === 'horizontal' ? 'vertical' : 'horizontal');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battleships\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ships\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Battleships:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this), ships.map(ship => /*#__PURE__*/_jsxDEV(Ship, {\n        ship: ship,\n        onPlaceShip: placeShip\n      }, ship.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleOrientation,\n        children: [\"Toggle Orientation (Current: \", orientation, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Player Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: playerGrid,\n        onCellClick: handleCellClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Computer Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        grid: computerGrid,\n        onCellClick: handleCellClick,\n        hideShips: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"gwEkwwjLz30+CSA6nJtc4CTUbRw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Grid","Ship","jsxDEV","_jsxDEV","initialGrid","Array","fill","map","ships","name","size","App","_s","playerGrid","setPlayerGrid","computerGrid","setComputerGrid","currentShip","setCurrentShip","placingShip","setPlacingShip","orientation","setOrientation","playerTurn","setPlayerTurn","gameOver","setGameOver","placedShips","setPlacedShips","placeComputerShips","length","newGrid","row","shipTypes","forEach","ship","placed","Math","random","floor","col","canPlaceShip","placeShipOnGrid","grid","i","handleCellClick","alert","checkWinCondition","setTimeout","computerMove","moveMade","player","allShipsSunk","cell","placeShip","includes","toggleOrientation","prevOrientation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPlaceShip","onClick","onCellClick","hideShips","_c","$RefreshReg$"],"sources":["/Users/mattia22nchi/Desktop/Programming/battleship/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Grid from './Grid';\nimport Ship from './Ship';\nimport './App.css';\n\nconst initialGrid = () =>\n  Array(10).fill(null).map(() => Array(10).fill(null));\n\nconst ships = [\n  { name: 'Destroyer', size: 1 },\n  { name: 'Submarine', size: 2 },\n  { name: 'Cruiser', size: 3 },\n  { name: 'Battleship', size: 4 },\n  { name: 'Aircraft Carrier', size: 5 },\n];\n\nconst App = () => {\n  const [playerGrid, setPlayerGrid] = useState(initialGrid());\n  const [computerGrid, setComputerGrid] = useState(initialGrid());\n  const [currentShip, setCurrentShip] = useState(null);\n  const [placingShip, setPlacingShip] = useState(false);\n  const [orientation, setOrientation] = useState('horizontal');\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [placedShips, setPlacedShips] = useState([]);\n\n  useEffect(() => {\n    placeComputerShips();\n  }, []);\n\n  useEffect(() => {\n    if (placedShips.length === ships.length) {\n      placeComputerShips();\n    }\n  }, [placedShips]);\n\n  const placeComputerShips = () => {\n    let newGrid = computerGrid.map(row => [...row]);\n    const shipTypes = [\n      { name: 'Destroyer', size: 1 },\n      { name: 'Submarine', size: 2 },\n      { name: 'Cruiser', size: 3 },\n      { name: 'Battleship', size: 4 },\n      { name: 'Aircraft Carrier', size: 5 },\n    ];\n\n    shipTypes.forEach((ship) => {\n      let placed = false;\n      while (!placed) {\n        const orientation = Math.random() < 0.5 ? 'horizontal' : 'vertical';\n        const row = Math.floor(Math.random() * 10);\n        const col = Math.floor(Math.random() * 10);\n        if (canPlaceShip(newGrid, ship.size, row, col, orientation)) {\n          newGrid = placeShipOnGrid(newGrid, ship.size, row, col, orientation);\n          placed = true;\n        }\n      }\n    });\n    setComputerGrid(newGrid);\n  };\n\n  const canPlaceShip = (grid, size, row, col, orientation) => {\n    if (orientation === 'horizontal') {\n      if (col + size > 10) return false;\n      for (let i = col; i < col + size; i++) {\n        if (grid[row][i] !== null) return false;\n      }\n    } else {\n      if (row + size > 10) return false;\n      for (let i = row; i < row + size; i++) {\n        if (grid[i][col] !== null) return false;\n      }\n    }\n    return true;\n  };\n\n  const placeShipOnGrid = (grid, size, row, col, orientation) => {\n    const newGrid = grid.map(row => [...row]);\n    if (orientation === 'horizontal') {\n      for (let i = col; i < col + size; i++) {\n        newGrid[row][i] = 'ship';\n      }\n    } else {\n      for (let i = row; i < row + size; i++) {\n        newGrid[i][col] = 'ship';\n      }\n    }\n    return newGrid;\n  };\n\n  const handleCellClick = (row, col) => {\n    if (placingShip && currentShip) {\n      if (canPlaceShip(playerGrid, currentShip.size, row, col, orientation)) {\n        const newGrid = placeShipOnGrid(playerGrid, currentShip.size, row, col, orientation);\n        setPlayerGrid(newGrid);\n        setCurrentShip(null);\n        setPlacingShip(false);\n        setPlacedShips([...placedShips, currentShip.name]);\n      }\n    } else if (playerTurn && !gameOver && computerGrid[row][col] !== 'hit' && computerGrid[row][col] !== 'miss') {\n      if (placedShips.length !== ships.length) {\n        alert('You have to place all ships to start game.');\n      } else {\n        const newGrid = computerGrid.map(row => [...row]);\n        if (newGrid[row][col] === 'ship') {\n          newGrid[row][col] = 'hit';\n        } else {\n          newGrid[row][col] = 'miss';\n        }\n        setComputerGrid(newGrid);\n        setPlayerTurn(false);\n        checkWinCondition(newGrid, 'computer');\n        setTimeout(computerMove, 1000);\n      }\n    }\n  };\n\n  const computerMove = () => {\n    let newGrid = playerGrid.map(row => [...row]);\n    let moveMade = false;\n    while (!moveMade) {\n      const row = Math.floor(Math.random() * 10);\n      const col = Math.floor(Math.random() * 10);\n      if (newGrid[row][col] !== 'hit' && newGrid[row][col] !== 'miss') {\n        if (newGrid[row][col] === 'ship') {\n          newGrid[row][col] = 'hit';\n        } else {\n          newGrid[row][col] = 'miss';\n        }\n        moveMade = true;\n      }\n    }\n    setPlayerGrid(newGrid);\n    checkWinCondition(newGrid, 'player');\n    setPlayerTurn(true);\n  };\n\n  const checkWinCondition = (grid, player) => {\n    let allShipsSunk = true;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell === 'ship') allShipsSunk = false;\n      });\n    });\n    if (allShipsSunk) {\n      setGameOver(true);\n      alert(`${player === 'player' ? 'Computer' : 'Player'} wins!`);\n    }\n  };\n\n  const placeShip = (ship) => {\n    if (!placedShips.includes(ship.name)) {\n      setCurrentShip(ship);\n      setPlacingShip(true);\n    } else {\n      alert(`You have already placed a ${ship.name}.`);\n    }\n  };\n\n  const toggleOrientation = () => {\n    setOrientation((prevOrientation) => (prevOrientation === 'horizontal' ? 'vertical' : 'horizontal'));\n  };\n\n\n  return (\n    <div className='battleships'>\n      <div className='ships'>\n      <h1>Battleships:</h1>\n\n        {ships.map((ship) => (\n          <Ship key={ship.name} ship={ship} onPlaceShip={placeShip} />\n        ))}\n        <button onClick={toggleOrientation}>\n          Toggle Orientation (Current: {orientation})\n        </button>\n      </div>\n      <div>\n        <h2>Player Grid</h2>\n        <Grid grid={playerGrid} onCellClick={handleCellClick} />\n      </div>\n      <div>\n        <h2>Computer Grid</h2>\n        <Grid grid={computerGrid} onCellClick={handleCellClick} hideShips={true} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}