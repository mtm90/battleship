{"ast":null,"code":"import React,{useState,useEffect}from'react';import Grid from'./Grid';import Ship from'./Ship';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const initialGrid=()=>Array(10).fill(null).map(()=>Array(10).fill(null));const ships=[{name:'Destroyer',size:1},{name:'Submarine',size:2},{name:'Cruiser',size:3},{name:'Battleship',size:4},{name:'Aircraft Carrier',size:5}];const App=()=>{const[playerGrid,setPlayerGrid]=useState(initialGrid());const[computerGrid,setComputerGrid]=useState(initialGrid());const[currentShip,setCurrentShip]=useState(null);const[placingShip,setPlacingShip]=useState(false);const[orientation,setOrientation]=useState('horizontal');const[playerTurn,setPlayerTurn]=useState(true);const[gameOver,setGameOver]=useState(false);const[placedShips,setPlacedShips]=useState([]);useEffect(()=>{if(placedShips.length===ships.length){placeComputerShips();}},[placedShips]);const placeComputerShips=()=>{let newGrid=computerGrid.map(row=>[...row]);ships.forEach(ship=>{let placed=false;while(!placed){const orientation=Math.random()<0.5?'horizontal':'vertical';const row=Math.floor(Math.random()*10);const col=Math.floor(Math.random()*10);if(canPlaceShip(newGrid,ship.size,row,col,orientation)){newGrid=placeShipOnGrid(newGrid,ship.size,row,col,orientation);placed=true;}}});setComputerGrid(newGrid);};const canPlaceShip=(grid,size,row,col,orientation)=>{if(orientation==='horizontal'){if(col+size>10)return false;for(let i=col;i<col+size;i++){if(grid[row][i]!==null)return false;}}else{if(row+size>10)return false;for(let i=row;i<row+size;i++){if(grid[i][col]!==null)return false;}}return true;};const placeShipOnGrid=(grid,size,row,col,orientation)=>{const newGrid=grid.map(row=>[...row]);if(orientation==='horizontal'){for(let i=col;i<col+size;i++){newGrid[row][i]='ship';}}else{for(let i=row;i<row+size;i++){newGrid[i][col]='ship';}}return newGrid;};const handleCellClick=(row,col)=>{if(placingShip&&currentShip){if(canPlaceShip(playerGrid,currentShip.size,row,col,orientation)){const newGrid=placeShipOnGrid(playerGrid,currentShip.size,row,col,orientation);setPlayerGrid(newGrid);setCurrentShip(null);setPlacingShip(false);setPlacedShips([...placedShips,currentShip.name]);}}else if(playerTurn&&!gameOver&&computerGrid[row][col]!=='hit'&&computerGrid[row][col]!=='miss'){if(placedShips.length!==ships.length){alert('You have to place all ships to start game.');}else{const newGrid=computerGrid.map(row=>[...row]);if(newGrid[row][col]==='ship'){newGrid[row][col]='hit';}else{newGrid[row][col]='miss';}setComputerGrid(newGrid);setPlayerTurn(false);checkWinCondition(newGrid,'computer');setTimeout(computerMove,1000);}}};const computerMove=()=>{let newGrid=playerGrid.map(row=>[...row]);let moveMade=false;while(!moveMade){const row=Math.floor(Math.random()*10);const col=Math.floor(Math.random()*10);if(newGrid[row][col]!=='hit'&&newGrid[row][col]!=='miss'){if(newGrid[row][col]==='ship'){newGrid[row][col]='hit';}else{newGrid[row][col]='miss';}moveMade=true;}}setPlayerGrid(newGrid);checkWinCondition(newGrid,'player');setPlayerTurn(true);};const checkWinCondition=(grid,player)=>{let allShipsSunk=true;grid.forEach(row=>{row.forEach(cell=>{if(cell==='ship')allShipsSunk=false;});});if(allShipsSunk){setGameOver(true);alert(\"\".concat(player==='player'?'Computer':'Player',\" wins!\"));}};const placeShip=ship=>{if(!placedShips.includes(ship.name)){setCurrentShip(ship);setPlacingShip(true);}else{alert(\"You have already placed a \".concat(ship.name,\".\"));}};const toggleOrientation=()=>{setOrientation(prevOrientation=>prevOrientation==='horizontal'?'vertical':'horizontal');};return/*#__PURE__*/_jsxs(\"div\",{className:\"battleships\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"ships\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Battleships:\"}),ships.map(ship=>/*#__PURE__*/_jsx(Ship,{ship:ship,onPlaceShip:placeShip},ship.name)),/*#__PURE__*/_jsxs(\"button\",{onClick:toggleOrientation,children:[\"Toggle Orientation (Current: \",orientation,\")\"]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Player Grid\"}),/*#__PURE__*/_jsx(Grid,{grid:playerGrid,onCellClick:handleCellClick})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Computer Grid\"}),/*#__PURE__*/_jsx(Grid,{grid:computerGrid,onCellClick:handleCellClick,hideShips:true})]})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","Grid","Ship","jsx","_jsx","jsxs","_jsxs","initialGrid","Array","fill","map","ships","name","size","App","playerGrid","setPlayerGrid","computerGrid","setComputerGrid","currentShip","setCurrentShip","placingShip","setPlacingShip","orientation","setOrientation","playerTurn","setPlayerTurn","gameOver","setGameOver","placedShips","setPlacedShips","length","placeComputerShips","newGrid","row","forEach","ship","placed","Math","random","floor","col","canPlaceShip","placeShipOnGrid","grid","i","handleCellClick","alert","checkWinCondition","setTimeout","computerMove","moveMade","player","allShipsSunk","cell","concat","placeShip","includes","toggleOrientation","prevOrientation","className","children","onPlaceShip","onClick","onCellClick","hideShips"],"sources":["/Users/mattia22nchi/Desktop/Programming/battleship/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Grid from './Grid';\nimport Ship from './Ship';\nimport './App.css';\n\nconst initialGrid = () =>\n  Array(10).fill(null).map(() => Array(10).fill(null));\n\nconst ships = [\n  { name: 'Destroyer', size: 1 },\n  { name: 'Submarine', size: 2 },\n  { name: 'Cruiser', size: 3 },\n  { name: 'Battleship', size: 4 },\n  { name: 'Aircraft Carrier', size: 5 },\n];\n\nconst App = () => {\n  const [playerGrid, setPlayerGrid] = useState(initialGrid());\n  const [computerGrid, setComputerGrid] = useState(initialGrid());\n  const [currentShip, setCurrentShip] = useState(null);\n  const [placingShip, setPlacingShip] = useState(false);\n  const [orientation, setOrientation] = useState('horizontal');\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n  const [placedShips, setPlacedShips] = useState([]);\n\n  useEffect(() => {\n    if (placedShips.length === ships.length) {\n      placeComputerShips();\n    }\n  }, [placedShips]);\n\n  const placeComputerShips = () => {\n    let newGrid = computerGrid.map(row => [...row]);\n\n    ships.forEach((ship) => {\n      let placed = false;\n      while (!placed) {\n        const orientation = Math.random() < 0.5 ? 'horizontal' : 'vertical';\n        const row = Math.floor(Math.random() * 10);\n        const col = Math.floor(Math.random() * 10);\n        if (canPlaceShip(newGrid, ship.size, row, col, orientation)) {\n          newGrid = placeShipOnGrid(newGrid, ship.size, row, col, orientation);\n          placed = true;\n        }\n      }\n    });\n    setComputerGrid(newGrid);\n  };\n\n  const canPlaceShip = (grid, size, row, col, orientation) => {\n    if (orientation === 'horizontal') {\n      if (col + size > 10) return false;\n      for (let i = col; i < col + size; i++) {\n        if (grid[row][i] !== null) return false;\n      }\n    } else {\n      if (row + size > 10) return false;\n      for (let i = row; i < row + size; i++) {\n        if (grid[i][col] !== null) return false;\n      }\n    }\n    return true;\n  };\n\n  const placeShipOnGrid = (grid, size, row, col, orientation) => {\n    const newGrid = grid.map(row => [...row]);\n    if (orientation === 'horizontal') {\n      for (let i = col; i < col + size; i++) {\n        newGrid[row][i] = 'ship';\n      }\n    } else {\n      for (let i = row; i < row + size; i++) {\n        newGrid[i][col] = 'ship';\n      }\n    }\n    return newGrid;\n  };\n\n  const handleCellClick = (row, col) => {\n    if (placingShip && currentShip) {\n      if (canPlaceShip(playerGrid, currentShip.size, row, col, orientation)) {\n        const newGrid = placeShipOnGrid(playerGrid, currentShip.size, row, col, orientation);\n        setPlayerGrid(newGrid);\n        setCurrentShip(null);\n        setPlacingShip(false);\n        setPlacedShips([...placedShips, currentShip.name]);\n      }\n    } else if (playerTurn && !gameOver && computerGrid[row][col] !== 'hit' && computerGrid[row][col] !== 'miss') {\n      if (placedShips.length !== ships.length) {\n        alert('You have to place all ships to start game.');\n      } else {\n        const newGrid = computerGrid.map(row => [...row]);\n        if (newGrid[row][col] === 'ship') {\n          newGrid[row][col] = 'hit';\n        } else {\n          newGrid[row][col] = 'miss';\n        }\n        setComputerGrid(newGrid);\n        setPlayerTurn(false);\n        checkWinCondition(newGrid, 'computer');\n        setTimeout(computerMove, 1000);\n      }\n    }\n  };\n\n  const computerMove = () => {\n    let newGrid = playerGrid.map(row => [...row]);\n    let moveMade = false;\n    while (!moveMade) {\n      const row = Math.floor(Math.random() * 10);\n      const col = Math.floor(Math.random() * 10);\n      if (newGrid[row][col] !== 'hit' && newGrid[row][col] !== 'miss') {\n        if (newGrid[row][col] === 'ship') {\n          newGrid[row][col] = 'hit';\n        } else {\n          newGrid[row][col] = 'miss';\n        }\n        moveMade = true;\n      }\n    }\n    setPlayerGrid(newGrid);\n    checkWinCondition(newGrid, 'player');\n    setPlayerTurn(true);\n  };\n\n  const checkWinCondition = (grid, player) => {\n    let allShipsSunk = true;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell === 'ship') allShipsSunk = false;\n      });\n    });\n    if (allShipsSunk) {\n      setGameOver(true);\n      alert(`${player === 'player' ? 'Computer' : 'Player'} wins!`);\n    }\n  };\n\n  const placeShip = (ship) => {\n    if (!placedShips.includes(ship.name)) {\n      setCurrentShip(ship);\n      setPlacingShip(true);\n    } else {\n      alert(`You have already placed a ${ship.name}.`);\n    }\n  };\n\n  const toggleOrientation = () => {\n    setOrientation((prevOrientation) => (prevOrientation === 'horizontal' ? 'vertical' : 'horizontal'));\n  };\n\n  return (\n    <div className='battleships'>\n      <div className='ships'>\n        <h1>Battleships:</h1>\n        {ships.map((ship) => (\n          <Ship key={ship.name} ship={ship} onPlaceShip={placeShip} />\n        ))}\n        <button onClick={toggleOrientation}>\n          Toggle Orientation (Current: {orientation})\n        </button>\n      </div>\n      <div>\n        <h2>Player Grid</h2>\n        <Grid grid={playerGrid} onCellClick={handleCellClick} />\n      </div>\n      <div>\n        <h2>Computer Grid</h2>\n        <Grid grid={computerGrid} onCellClick={handleCellClick} hideShips={true} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}